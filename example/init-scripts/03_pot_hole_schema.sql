-- =====================================================
-- Example Application: Pot Hole Observation System
-- =====================================================

-- Enable PostGIS extension (installed in public schema by default)
CREATE EXTENSION IF NOT EXISTS postgis;

-- Bid table
CREATE TABLE "public"."Bid" (
	"id" BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
	"created_at" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
	"owner" UUID NOT NULL,
	"work_start_date" DATE NOT NULL,
	"work_end_date" DATE NOT NULL,
	"work_package" BIGINT NOT NULL
);

-- Issue table
CREATE TABLE "public"."Issue" (
	"id" BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
	"created_at" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
	"updated_at" TIMESTAMP WITH TIME ZONE,
	"status" BIGINT NOT NULL DEFAULT '1'::BIGINT,
	"created_user" UUID,
	"work_package" BIGINT
);

-- IssueStatus table
CREATE TABLE "public"."IssueStatus" (
	"id" BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
	"created_at" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
	"display_name" CHARACTER VARYING NOT NULL
);

-- WorkDetail table
CREATE TABLE "public"."WorkDetail" (
	"id" BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
	"created_at" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
	"issue" BIGINT NOT NULL,
	"added_by" UUID NOT NULL
);

-- WorkPackage table
CREATE TABLE "public"."WorkPackage" (
	"id" BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
	"created_at" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
	"display_name" CHARACTER VARYING NOT NULL,
	"quote_due_date" TIMESTAMP WITH TIME ZONE NOT NULL,
	"status" BIGINT
);

-- WorkPackageStatus table
CREATE TABLE "public"."WorkPackageStatus" (
	"id" BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
	"created_at" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
	"display_name" CHARACTER VARYING NOT NULL
);

-- Create indexes
CREATE UNIQUE INDEX "Bid_pkey" ON public."Bid" USING btree (id);
CREATE UNIQUE INDEX "IssueStatus_display_name_key" ON public."IssueStatus" USING btree (display_name);
CREATE UNIQUE INDEX "IssueStatus_pkey" ON public."IssueStatus" USING btree (id);
CREATE UNIQUE INDEX "Issue_pkey" ON public."Issue" USING btree (id);
CREATE UNIQUE INDEX "WorkDetail_pkey" ON public."WorkDetail" USING btree (id);
CREATE UNIQUE INDEX "WorkPackageStatus_pkey" ON public."WorkPackageStatus" USING btree (id);
CREATE UNIQUE INDEX "WorkPackage_pkey" ON public."WorkPackage" USING btree (id);

-- Add primary key constraints
ALTER TABLE "public"."Bid" ADD CONSTRAINT "Bid_pkey" PRIMARY KEY USING INDEX "Bid_pkey";
ALTER TABLE "public"."Issue" ADD CONSTRAINT "Issue_pkey" PRIMARY KEY USING INDEX "Issue_pkey";
ALTER TABLE "public"."IssueStatus" ADD CONSTRAINT "IssueStatus_pkey" PRIMARY KEY USING INDEX "IssueStatus_pkey";
ALTER TABLE "public"."WorkDetail" ADD CONSTRAINT "WorkDetail_pkey" PRIMARY KEY USING INDEX "WorkDetail_pkey";
ALTER TABLE "public"."WorkPackage" ADD CONSTRAINT "WorkPackage_pkey" PRIMARY KEY USING INDEX "WorkPackage_pkey";
ALTER TABLE "public"."WorkPackageStatus" ADD CONSTRAINT "WorkPackageStatus_pkey" PRIMARY KEY USING INDEX "WorkPackageStatus_pkey";

-- Add foreign key constraints
ALTER TABLE "public"."Bid" ADD CONSTRAINT "Bid_owner_fkey"
  FOREIGN KEY (owner) REFERENCES public.civic_os_users(id) NOT VALID;
ALTER TABLE "public"."Bid" VALIDATE CONSTRAINT "Bid_owner_fkey";

ALTER TABLE "public"."Bid" ADD CONSTRAINT "Bid_work_package_fkey"
  FOREIGN KEY (work_package) REFERENCES "WorkPackage"(id) NOT VALID;
ALTER TABLE "public"."Bid" VALIDATE CONSTRAINT "Bid_work_package_fkey";

ALTER TABLE "public"."Issue" ADD CONSTRAINT "Issue_created_user_fkey"
  FOREIGN KEY (created_user) REFERENCES public.civic_os_users(id) NOT VALID;
ALTER TABLE "public"."Issue" VALIDATE CONSTRAINT "Issue_created_user_fkey";

ALTER TABLE "public"."Issue" ADD CONSTRAINT "Issue_status_fkey"
  FOREIGN KEY (status) REFERENCES "IssueStatus"(id) NOT VALID;
ALTER TABLE "public"."Issue" VALIDATE CONSTRAINT "Issue_status_fkey";

ALTER TABLE "public"."Issue" ADD CONSTRAINT "Issue_work_package_fkey"
  FOREIGN KEY (work_package) REFERENCES "WorkPackage"(id) NOT VALID;
ALTER TABLE "public"."Issue" VALIDATE CONSTRAINT "Issue_work_package_fkey";

ALTER TABLE "public"."IssueStatus" ADD CONSTRAINT "IssueStatus_display_name_key"
  UNIQUE USING INDEX "IssueStatus_display_name_key";

ALTER TABLE "public"."WorkDetail" ADD CONSTRAINT "WorkDetail_added_by_fkey"
  FOREIGN KEY (added_by) REFERENCES public.civic_os_users(id) NOT VALID;
ALTER TABLE "public"."WorkDetail" VALIDATE CONSTRAINT "WorkDetail_added_by_fkey";

ALTER TABLE "public"."WorkDetail" ADD CONSTRAINT "WorkDetail_issue_fkey"
  FOREIGN KEY (issue) REFERENCES "Issue"(id) NOT VALID;
ALTER TABLE "public"."WorkDetail" VALIDATE CONSTRAINT "WorkDetail_issue_fkey";

ALTER TABLE "public"."WorkPackage" ADD CONSTRAINT "WorkPackage_status_fkey"
  FOREIGN KEY (status) REFERENCES "WorkPackageStatus"(id) NOT VALID;
ALTER TABLE "public"."WorkPackage" VALIDATE CONSTRAINT "WorkPackage_status_fkey";

-- Grant permissions
GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE "public"."Bid" TO web_anon, authenticated;
GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE "public"."Issue" TO web_anon, authenticated;
GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE "public"."IssueStatus" TO web_anon, authenticated;
GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE "public"."WorkDetail" TO web_anon, authenticated;
GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE "public"."WorkPackage" TO web_anon, authenticated;
GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE "public"."WorkPackageStatus" TO web_anon, authenticated;

-- Grant sequence permissions
GRANT USAGE ON SEQUENCE "public"."Bid_id_seq" TO web_anon, authenticated;
GRANT USAGE ON SEQUENCE "public"."Issue_id_seq" TO web_anon, authenticated;
GRANT USAGE ON SEQUENCE "public"."IssueStatus_id_seq" TO web_anon, authenticated;
GRANT USAGE ON SEQUENCE "public"."WorkDetail_id_seq" TO web_anon, authenticated;
GRANT USAGE ON SEQUENCE "public"."WorkPackage_id_seq" TO web_anon, authenticated;
GRANT USAGE ON SEQUENCE "public"."WorkPackageStatus_id_seq" TO web_anon, authenticated;

-- Create RLS policies (disabled for now - enable as needed)
-- ALTER TABLE "public"."Bid" ENABLE ROW LEVEL SECURITY;
-- ALTER TABLE "public"."Issue" ENABLE ROW LEVEL SECURITY;
-- ALTER TABLE "public"."IssueStatus" ENABLE ROW LEVEL SECURITY;
-- ALTER TABLE "public"."WorkDetail" ENABLE ROW LEVEL SECURITY;
-- ALTER TABLE "public"."WorkPackage" ENABLE ROW LEVEL SECURITY;
-- ALTER TABLE "public"."WorkPackageStatus" ENABLE ROW LEVEL SECURITY;

-- Create simple read policies
CREATE POLICY "Enable read access for all users" ON "public"."Bid" AS PERMISSIVE FOR SELECT TO PUBLIC USING (true);
CREATE POLICY "Enable read access for all users" ON "public"."Issue" AS PERMISSIVE FOR SELECT TO PUBLIC USING (true);
CREATE POLICY "Enable read access for all users" ON "public"."IssueStatus" AS PERMISSIVE FOR SELECT TO PUBLIC USING (true);
CREATE POLICY "Enable read access for all users" ON "public"."WorkDetail" AS PERMISSIVE FOR SELECT TO PUBLIC USING (true);
CREATE POLICY "Enable read access for all users" ON "public"."WorkPackage" AS PERMISSIVE FOR SELECT TO PUBLIC USING (true);
CREATE POLICY "Enable read access for all users" ON "public"."WorkPackageStatus" AS PERMISSIVE FOR SELECT TO PUBLIC USING (true);

-- Apply timestamp triggers
CREATE TRIGGER set_created_at_trigger
  BEFORE INSERT ON public."Bid"
  FOR EACH ROW
  EXECUTE FUNCTION public.set_created_at();

CREATE TRIGGER set_created_at_trigger
  BEFORE INSERT ON public."Issue"
  FOR EACH ROW
  EXECUTE FUNCTION public.set_created_at();

CREATE TRIGGER set_updated_at_trigger
  BEFORE INSERT OR UPDATE ON public."Issue"
  FOR EACH ROW
  EXECUTE FUNCTION public.set_updated_at();

CREATE TRIGGER set_created_at_trigger
  BEFORE INSERT ON public."IssueStatus"
  FOR EACH ROW
  EXECUTE FUNCTION public.set_created_at();

CREATE TRIGGER set_created_at_trigger
  BEFORE INSERT ON public."WorkDetail"
  FOR EACH ROW
  EXECUTE FUNCTION public.set_created_at();

CREATE TRIGGER set_created_at_trigger
  BEFORE INSERT ON public."WorkPackage"
  FOR EACH ROW
  EXECUTE FUNCTION public.set_created_at();

CREATE TRIGGER set_updated_at_trigger
  BEFORE INSERT OR UPDATE ON public."WorkPackage"
  FOR EACH ROW
  EXECUTE FUNCTION public.set_updated_at();

CREATE TRIGGER set_created_at_trigger
  BEFORE INSERT ON public."WorkPackageStatus"
  FOR EACH ROW
  EXECUTE FUNCTION public.set_created_at();
