version: '3.8'
services:
  postgres:
    image: postgis/postgis:15-3.4-alpine
    container_name: postgres_db
    ports:
      - "15432:5432"
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - postgrest-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 5

  postgrest:
    image: postgrest/postgrest:latest
    container_name: postgrest_api
    ports:
      - "3000:3000"
    environment:
      PGRST_DB_URI: postgres://authenticator:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      PGRST_DB_SCHEMA: public,metadata
      PGRST_DB_ANON_ROLE: web_anon
      PGRST_DB_PRE_REQUEST: "public.check_jwt"
      PGRST_JWT_SECRET: "@/etc/postgrest/jwt-secret.jwks"
      PGRST_JWT_AUD: "account"
      PGRST_OPENAPI_SERVER_PROXY_URI: "http://localhost:3000"
      PGRST_LOG_LEVEL: "info"
    volumes:
      - ./jwt-secret.jwks:/etc/postgrest/jwt-secret.jwks:ro
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - postgrest-network
    restart: unless-stopped

  # Optional: Swagger UI for API documentation
  swagger-ui:
    image: swaggerapi/swagger-ui
    container_name: swagger_ui
    ports:
      - "8080:8080"
    environment:
      API_URL: "http://postgrest:3000/"
    depends_on:
      - postgrest
    networks:
      - postgrest-network

volumes:
  postgres_data:
  init-scripts:

networks:
  postgrest-network:
    driver: bridge